extends layout

block content
    style.
        body{padding: 20px;}

    .Wr#app
        .pBlock
            .vCtrlWr
                .vCtrlItems(style="max-height:calc(100vh - 80px); overflow-y:scroll")
                    .vCtrlItem(v-for="block in blocks" :id="'listblock'+block.Id" v-bind:class="{disabled:!block.enabled}")

                        label
                            span {{block.TypeName}} {{block.Name}} &nbsp;
                            input(type="checkbox"  v-model="block.enabled" v-if="!isRunning")

                        div(style="display: flex;justify-content: space-between;")
                            div
                                //.vBlockTitle
                                .vBlockText(v-html="html(block.BlockText)")

                            .btn.btn-default(v-if="isRunning && block.enabled" v-on:click="scrollToBlock(block.Id)") ^


            div
                .btn.btn-default(v-on:click="updateBlocks()" v-if="!isRunning") Update
        .pBlock
            div


            .pBody
                .pBodyWr#pBodyWr
                    include bodyWr

            .pSpeedCtrl#pSpeedCtrl
                #pSpeedCtrlPoint
            .pSpeedCtrlVal(v-bind:class="{flicker:delta<=0}" style="margin: 5px 0; padding: 10px;") speed:{{delta}}
                span(v-if="!isRunning") &nbsp;&nbsp;font size:&nbsp;
                    input#pFontSize(type="numberic" v-model="config.fontSize" v-on:change="fontSizeChange()" )
                    span &nbsp;&nbsp;mirror:&nbsp;
                        label  &nbsp;
                            input(type="checkbox"  v-model="config.mirror" v-on:change="mirrorChange()" )
            div(v-if="isRunning")
                div

                    .btn.btn-default(v-on:click="slow()" ) Slower
                    .btn.btn-default(v-on:click="Reverse()" ) Reverse
                    .btn.btn-default(v-on:click="fast()" ) Faster
                div
                    .btn.btn-default(style="width:100%; margin-top:20px" v-bind:class="{flicker:isPause}" v-on:click="pause()" ) Pause
            div(v-if="!isRunning")
                .btn.btn-default(v-on:click="start()" ) Start
            div(v-else)
                div
                    .btn.btn-default(v-on:click="stop()" ) Stop


    script(src="/vue.min.js")
    script(src="/axios.min.js")
    script.
        var app = new Vue({
            el: "#app",
            data: {
                 isRunning: false,
                isPause:false,
                delta:localStorage.getItem("delta") || 5,
                blocks: [],
                promptBlocks: [],
                config: {
                    fontSize: localStorage.getItem("pfontSize") || 72,
                    mirror:localStorage.getItem("pmirror") || false,
                }
            },

            methods: {
                html:function(txt){
                    txt=txt.replace(/\(\(SOT[^\)\)]+\)\)/g,"\r\n<span style='color:green; font-weight:bold'>SOT</span>\r\n")
                    txt=txt.replace(/\(\([^\)\)]+\)\)/g,"")

                    txt = txt.replace(/^[\r\n]{0,100}/, "");
                    txt = txt.replace(/[\r\n]{2,100}/g, "</br></br>");

                    txt=txt.replace(/\n/g,"</br>");
                    return txt;
                },
                scrollToBlock:function (id) {

                    var elem=document.getElementById("block"+id)

                    i=-elem.offsetTop;
                    this.isPause=true;

                   // i=childPos.top- ( parentPos.top-elem.clientHeight);

                    //setTimeout(()=>{this.isRunning=false},500)
                   // setTimeout(()=>{this.isRunning=true},2000)
                   // console.log(elem.offset().top - elem.parentNode.offset().top);

                },
                checkRunning:function () {return !this.isRunning},
                Reverse: function () {this.delta=-this.delta;},
                fast: function () {
                    this.delta = parseInt(this.delta)+20;
                    if (parseInt(this.delta) > 400 || parseInt(this.delta) < -400)
                        this.delta = 400;


                },
                slow: function () {
                    this.delta =parseInt(this.delta)- 20;
                    if(parseInt(this.delta)>400 || parseInt(this.delta)<-400)
                        this.delta=-400;

                },
                fontSizeChange: function () {
                    document.getElementById("pPrompt").style.fontSize = this.config.fontSize + "px";
                    localStorage.setItem("pfontSize", this.config.fontSize)
                },
                mirrorChange:function (){

                    localStorage.setItem("pmirror", this.config.mirror)
                },
                pause:function (){this.isPause=!this.isPause},
                start: function () {
                    this.promptBlocks = this.blocks.filter(b => {
                        return b.enabled;
                    });
                    wsSend(JSON.stringify({sender:"controller", cmd:"startPrompt", config:this.config, val:this.promptBlocks}));
                    i=0;
                    this.isRunning = true;
                    this.isPause=true;
                },
                stop: function () {

                    console.log("stop function")
                    this.isPause=false;

                    if(this.delta<0)
                        this.delta=-this.delta;
                    this.isRunning = false;
                    i = 0;
                    wsSend(JSON.stringify({sender:"controller", cmd:"stopPrompt", config:this.config, val:[]}));
                },
                updateBlocks: async function () {
                    var r = await axios.get("/blocks")

                    while (r.data.length > 0) {
                        var item = r.data.shift();
                        var find = false;
                        this.blocks.forEach(b => {
                            if (b.Id == item.Id) {
                                find = true;
                                b.Name = item.Name;
                                b.TypeName = item.TypeName;
                                b.BlockText = item.BlockText;
                            }
                        })
                        if (!find) {
                            item.enabled=true;
                            this.blocks.push(item);
                        }
                    }
                    console.log(this.blocks)
                },
                resize: function () {
                    let elemPrompt = document.getElementById("pPrompt")
                    let elemPromptWr = document.getElementById("pBodyWr")
                    var coof = elemPromptWr.clientWidth / 1920;
                    elemPrompt.style.transform = "scale(" + (elemPromptWr.clientWidth / 1920) + ")"
                }
            },
            watch:{
                delta:function (){
                    localStorage.setItem("delta", this.delta);
                    updateSpeed();
                },
                isRunning: function () {

                },
                promptBlocks:function (){
                    let options = {
                        root: document.getElementById("app"),
                        rootMargin: '0px',
                        threshold: 0.001
                    }
                    let observer = new IntersectionObserver((e)=>{
                        var elem = document.getElementById("list"+e[0].target.id)
                        if(elem) {
                            if (e[0].isIntersecting) {
                                elem.classList.add("active");
                                elem.parentNode.scrollTop = elem.offsetTop-100;
                            }
                             else
                                elem.classList.remove("active")
                        }
                    }, options)
                    setTimeout(()=>{
                        this.promptBlocks.forEach(b => {
                            observer.observe(document.getElementById("block" + b.Id))
                        })
                    },0)



                }
            },
            mounted: async function () {
                this.updateBlocks();
                this.fontSizeChange();
                setTimeout(() => {
                    updateSpeed();
                    if(this.config.mirror=="false")
                        this.config.mirror=false;
                }, 0);
                document.body.addEventListener("keydown",(e)=>{
                    if(e.code=="Space" || e.code=="Enter"){
                        e.preventDefault();
                        if(!this.isRunning)
                            this.start();
                        else
                            this.pause();
                        return false;
                    }
                    if(e.code=="ArrowLeft"){
                        e.preventDefault();
                        if(this.isRunning)
                            this.slow();
                        return false;
                    }
                    if (e.code == "ArrowRight") {
                        e.preventDefault();
                        if (this.isRunning)
                            this.fast();
                        return false;
                    }
                    if (e.code == "Escape") {
                        e.preventDefault();
                        this.stop();
                        return false;
                    }



                });
                this.resize();
                window.addEventListener('resize', () => {
                    this.resize();
                }, true);

            },
        });



        var wsConnection ;
        initWs();
        function initWs() {
            wsConnection = new WebSocket("ws://" + location.host);
            wsConnection.onopen = function () {
                console.log("Web socket connection esteblished");
            };

            wsConnection.onclose = function (event) {
                if (event.wasClean) {
                    console.warn('Web socket connection CLOSED partly');
                } else {
                    console.warn('Web socket connection is list'); // например, "убит" процесс сервера
                }
                console.log('Code: ' + event.code + ' reason: ' + event.reason);
                setTimeout(initWs,500);
            };

            wsConnection.onerror = function (error) {
                console.warn("Error  " + error.message);
            };
            wsConnection.onmessage = async (message) => {

                try {

                } catch (e) {
                    console.warn(e)
                }
            }
        }

        const wsSend = function (data) {
            // readyState - true, если есть подключение
            if (!wsConnection.readyState) {
                setTimeout(function () {
                    wsSend(data);
                }, 100);
            } else {
                wsConnection.send(data);
            }
        };


        var elem = document.querySelector(".items")
        var i=0;
        var work = () => {

            if (app.isRunning ) {

               /* if (elem.getBoundingClientRect().height + i < 0 && app.delta>0) {
                    app.isRunning = false
                }*/
                if(elem.offsetHeight+i< elem.parentNode.offsetHeight-(elem.parentNode.offsetHeight/2) && app.delta>0)
                    app.isPause=true;
                if(i>0  && app.delta<0)
                    app.isPause = true;
                if(!app.isPause)
                        i = i - app.delta;

            }
            elem.style.top = i + "px";
            wsSend(JSON.stringify({sender:"controller", cmd:"promptChange", config:this.config, val:i}));
            setTimeout(() => {
                work(i)
            }, 400);

        }
        work(0);


        const startPromprt = () => {
            // wsSend(JSON.stringify({sender:"controller", cmd:"startPrompt", val:1}));
        }
        const stopPromprt = () => {
            // wsSend(JSON.stringify({sender: "controller", cmd: "stopPrompt", val: 0}));
        }
        function updateSpeed(){
            var elem=document.getElementById("pSpeedCtrlPoint")
            if(elem)
                elem.style.left=(((parseInt(app.delta)+400)/800)*100)+"%"
        }

        document.getElementById("pSpeedCtrl").addEventListener("click",(e)=>{


            app.delta=(parseInt(865*(e.offsetX/document.getElementById("pSpeedCtrl").getClientRects()[0].x)-400))

        })
        setInputFilter(document.getElementById("pFontSize"), function (value) {
            return /^\d*\.?\d*$/.test(value); // Allow digits and '.' only, using a RegExp
        });

        function setInputFilter(textbox, inputFilter) {
            ["input", "keydown", "keyup", "mousedown", "mouseup", "select", "contextmenu", "drop"].forEach(function (event) {
                textbox.addEventListener(event, function () {
                    if (inputFilter(this.value)) {
                        this.oldValue = this.value;
                        this.oldSelectionStart = this.selectionStart;
                        this.oldSelectionEnd = this.selectionEnd;
                    } else if (this.hasOwnProperty("oldValue")) {
                        this.value = this.oldValue;
                        this.setSelectionRange(this.oldSelectionStart, this.oldSelectionEnd);
                    } else {
                        this.value = "";
                    }
                });
            });
        }
